#!/usr/bin/env ruby
#
# © Johannes Krude 2008
#
# This file is part of sendfile-utils.
#
# broadcast-files is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# broadcast-files is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with Foobar.  If not, see <http://www.gnu.org/licenses/>.
#

$version= "pre 0.1α"

$: << "./lib"
require 'optparse'
require 'pathname'
require 'sendhttp-lib/httpserver'
require 'sendhttp-lib/html'

$verbose= 1

begin
	arghandler= OptionParser.new
	
	arghandler.banner= "Usage: sendhttp [options] <file [@ name]>*"

	arghandler.on("-h", "--help", "display this message") do
		STDOUT.puts arghandler
		exit 0
	end

	$listing= false
	arghandler.on("-l", "--listing", "enable directory listing") do
		$listing= true
	end

	$port= 12345
	arghandler.on("-p PORT", "--port PORT", Integer, "Listen on port PORT") do |port|
		$port= port.to_i
	end

	$quit= 1.0/0
	arghandler.on("-q NUM", "--quit NUM", Integer, "quit after NUM succesfull downloads") do |num|
		$quit= num
	end

	$timeout= 1.0/0 #Infinity
	arghandler.on("-t SECONDS", "--timeout SECONDS", Float, "wait SECONDS for a request") do |timeout|
		$timeout= timeout
	end

	arghandler.on("-v", "--version", "display the version number") do
		STDOUT.puts $version
		exit 0
	end

	def find(dir= ".")
		Dir.new(dir).collect do |f|
			next if f=~ /^\./
			next if FileTest.symlink?(f)
			if FileTest.directory?(f)
				find(f).collect { |g| f+"/"+g }
			else
				f
			end
		end.delete_if { |x| !x }.flatten
	end
	
	$file= Hash.new
	name= false
	last= nil
	(arghandler.parse(ARGV)+[nil]).each do |file|
		case
		when name
			name= false
			$file[file]= last
			last= nil
		when file=="@"
			name= true
		else
			$file[last]= last if last
			last= file
		end
	end
	$file.each_key do |k|
		if !( k and $file[k] and !FileTest.symlink?($file[k]))
			$file.delete(k)
		elsif FileTest.directory?($file[k])
			find($file[k]).each do |f|
				$file[k+"/"+f]= $file[k]+"/"+f
			end
			$file.delete(k)
		else
			unless File.exists?($file[k])
				STDERR.puts "File '#{last}' does not exist"
				exit 1
			end
		end
	end

	unless $file.size > 0
		STDERR.puts "No filename given"
		exit 1
	end

	server= HTTPServer.new
	server.listen($port) do |filename, vars|
		if $file[filename]
			$quit-= 1
			server.close if $quit==0
			HTTPServer.put_file($file[filename])
		elsif $listing
			[HTML.base(HTML.h1("The following files are available")+HTML.div(HTML.list($file.keys.sort.collect { |k| HTML.a(k, "/#{k}") } ))), nil, "404 NOT FOUND"]
		else
				false
		end
	end

rescue OptionParser::MissingArgument => e
	STDERR.puts "Missing argument for '#{e.args}'"
	exit 1
rescue OptionParser::InvalidOption => e
	STDERR.puts "Undefined Option '#{e.args}'"
	exit 1
rescue OptionParser::InvalidArgument => e
	STDERR.puts "Invalid argument for '#{e.args}'"
	exit 1
rescue SignalException => e
	STDERR.puts "#{e} aborted"
rescue Interrupt
	STDERR.puts "aborted"
end

